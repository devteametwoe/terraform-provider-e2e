VOLUMES:

(1) API URL: https://api-stage.e2enetworks.net/myaccount/api/v1/block_storage/ 
        QUERY STRING PARAMETERS:
        apikey: df8856f3-3fe0-4b97-bed3-af7761cee847
        project_id: 312
        location: Delhi

        REQUEST PAYLOAD:
        {name: "Testing_Block_Storage", size: 5, iops: 75} :-
        iops: 75
        name: "Testing_Block_Storage"
        size: 5

        RESPONSE:
        {
            "code": 200,
            "data": {
                "id": 18479,
                "image_name": "V_1TB_316",
                "resource_type": null,
                "label_id": null
            },
            "errors": {},
            "message": "Success"
        }

(2) API URL: https://api-stage.e2enetworks.net/myaccount/api/v1/block_storage/
    QUERY STRING PARAMETERS:
        apikey: 9cb2d82b-6ad7-4746-a258-d99711a495eb
        project_id: 312
        location: Delhi

    RESPONSE:
        {
            "code": 200,
            "data": [
                {
                    "block_id": 18479,
                    "name": "V_1TB_316",
                    "size": 1024000,
                    "status": "Creating",
                    "template": {
                        "DEV_PREFIX": "vd",
                        "DRIVER": "raw",
                        "TOTAL_IOPS_SEC": "20000"
                    },
                    "vm_detail": {},
                    "created_on": "2024-02-21T05:28:48Z"
                }
            ],
            "errors": {},
            "message": "Success"
        }    


(3) API URL: https://api-stage.e2enetworks.net/myaccount/api/v1/label/mapping/volumes/
    QUERY STRING PARAMETERS:
        apikey: 9cb2d82b-6ad7-4746-a258-d99711a495eb
        project_id: 312
        location: Delhi        

    RESPONSE:
        {"code":200,"data":[],"errors":{},"message":"Success"}    







(4) https://api-stage.e2enetworks.net/myaccount/api/v1/block_storage/410/vm/attach/     PUT
    QUERY STRING PARAMETERS:
        apikey: 837815e8-7f93-45e8-a4c0-27913a7f417e
        project_id: 312
        location: Delhi
    REQUEST PAYLOAD: 
        vm_id: 3487        

    RESPONSE:
        {
            "code": 200,
            "data": {
                "image_id": 410,
                "vm_id": 3487
            },
            "errors": {},
            "message": "Block Storage is Attached to VM."
        }    


(5) https://api.e2enetworks.com/myaccount/api/v1/block_storage/18489/           DELETE    
    QUERY STRING PARAMETERS:
        apikey: b75da246-0180-49e7-ae70-4c4297dbadbd
        project_id: 312
        location: Delhi  
    
    RESPONSE:
    {
        "code": 200,
        "data": {
            "image_id": 18489,
            "image_name": "Pulkit_Testing_Volume_250"
        },
        "errors": {},
        "message": "Block Storage Deleted"
    }      

Node:


backups: false
default_public_ip: false
disable_password: false
enable_bitninja: false
image: "CentOS-7.5-Distro"
is_encryption_required: false
is_ipv6_availed: false
is_saved_image: false
label: "Default"
name: "CentOS-7-20july22-467"
ngc_container_id: null
plan: "C-1vCPU-2RAM-10DISK-CentOS-7-20july22"
region: "ncr"
reserve_ip: ""
reserve_ip_pool: ""
saved_image_template_id: null
security_group_id: 458
ssh_keys: []
start_scripts: []
vpc_id: ""





Struct  is for the data that you will send in the payload of the API.
Schema is basically the way you will take the input from end user in .tf configuration file.





resource "example_node" "node1" {
    name              = "node_name"
    plan              = "C-1vCPU-2RAM-10DISK-CentOS-7-20july22"
    image             = "CentOS-7.5-Distro"
}

resource "example_blockstorage" "bs1" {
  name = "pulkit_bs"
  size = 5
  project_id = 312
  location = "Delhi"
}

resource "example_blockstorage" "bs3" {
  name = "pulkit_bs3"
  size = 10
  project_id = 312
  location = "Delhi"
}





data "example_blockstorage" "datasource_bs1" {
  block_id = 413
  project_id = 328
  size = 5
}

resource "example_blockstorage" "bs3" {
  name = "unknown"
  size = 0
  project_id = 328
  location = "unknown"
}






terraform {
 required_providers {
   e2e = {
     source = "e2eterraformprovider/e2e"
     version = "2.0.4"
   }
 }
}

provider "e2e" {
 api_key = "1f1d8aa6-fd45-489a-a9fb-3487bf5c09e6"
 auth_token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJleHAiOjE3MzU4MDg4MjksImlhdCI6MTcwNDI3MjgyOSwianRpIjoiMGVhMjUxYzAtZWQyZS00ZGI0LTk2Y2MtNjE5NTlkN2EwM2Q0IiwiaXNzIjoiaHR0cDovL2dhdGV3YXkuZTJlbmV0d29ya3MuY29tL2F1dGgvcmVhbG1zL2FwaW1hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJkMDNiNzQ3Ny0xMDk4LTQ1ODgtOGRkYS1iMjhlNjEwMzI3YjQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhcGltYW51aSIsInNlc3Npb25fc3RhdGUiOiJiNDJhZDExNi00ZjE3LTRiYTgtYjRmYi02ODU3NGVkNjkxODgiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImFwaXVzZXIiLCJkZWZhdWx0LXJvbGVzLWFwaW1hbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsInNpZCI6ImI0MmFkMTE2LTRmMTctNGJhOC1iNGZiLTY4NTc0ZWQ2OTE4OCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IlB1bGtpdCAgR3VwdGEiLCJwcmltYXJ5X2VtYWlsIjoicHVsa2l0Lmd1cHRhQGUyZW5ldHdvcmtzLmNvbSIsImlzX3ByaW1hcnlfY29udGFjdCI6dHJ1ZSwicHJlZmVycmVkX3VzZXJuYW1lIjoicHVsa2l0Lmd1cHRhQGUyZW5ldHdvcmtzLmNvbSIsImdpdmVuX25hbWUiOiJQdWxraXQgIiwiZmFtaWx5X25hbWUiOiJHdXB0YSIsImVtYWlsIjoicHVsa2l0Lmd1cHRhQGUyZW5ldHdvcmtzLmNvbSJ9.qqYTwmW0odLyU00fW43RzX63F31NJ1PGhcran_zMs6ND4MBYW7YnTIzDOuoSHN8ynV-dJlwG2MDN5sbixr3GtZE4EnEuxjocyY1XFVr9GzgDZpHYVCz2utUBIBbz9JCeONWyG6JymTiMhpRDXbfSjVl_MYOuRm6tmXxKpPVXL1U"
}


resource "e2e_blockstorage" "bs_testing1"{
  name = "testing_creation_bs"
  size = 250
  project_id = "27826"
  location = "Delhi"
}


func calculateIOPS(size float64) int {
	switch size {
	case 250:
		return 5000
	case 500:
		return 10000
	case 1000:
		return 20000
	case 2000:
		return 40000
	case 4000:
		return 80000
	case 8000:
		return 120000
	case 16000:
		return 240000
	case 24000:
		return 360000
	default:
		return 0
	}
}

validSizes := []float64{250, 500, 1000, 2000, 4000, 8000}


---
# e2e_blockstorage (Data Source)





<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `block_id` (String) ID of the node to be specified to read that particular node
- `project_id` (Number) ID of the project. 
- `size` (Number) Size of the block storage in GB. Choose from: { 250, 5000, 1000, 2000, 4000, 8000, 16000, 24000}.

### Optional

- `location` (String) Location of the block storage

### Read-Only

- `iops` (Number) IOPS of the block storage
- `name` (String) The name of the resource, also acts as it's unique ID
- `status` (String) Status of the block storage

















# e2e_blockstorage (Resource)





<!-- schema generated by tfplugindocs -->

<!-- schema generated by tfplugindocs -->
## Example Usage
```hcl
 resource "e2e_blockstorage" "blockstorage1" {
	name              = "block_storage_name"
    project_id        = 21212 //Just an example
    size              = 250
    location          = "Delhi" 
 }
```
## Schema

### Required

- `name` (String) The name of the block storage, also acts as its unique ID.
- `project_id` (Number) ID of the associated project.
- `size` (Number) Size of the block storage in GB. Choose from: { 250, 5000, 1000, 2000, 4000, 8000, 16000, 24000}.

### Optional

- `location` (String) Location of the block storage. Defaults to your E2E MyAccount's default location.

### Read-Only



- `id` (String) The ID of this resource.
- `iops` (Number) Input/Output Operations Per Second for the block storage, automatically set.
- `status` (String) status (String): Current status of the block storage.